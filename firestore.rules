rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function hasValidRole() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'agent'];
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDataOwner(createdBy) {
      return isAuthenticated() && request.auth.uid == createdBy;
    }
    
    function isValidPolicyData() {
        return request.resource.data.keys().hasAll(['type', 'status', 'customerId', 'policyNumber', 'vehicle', 'startDate', 'endDate', 'premium', 'createdBy', 'agent_id']) &&
            request.resource.data.type in ['comprehensive', 'third_party'] &&
            request.resource.data.status in ['active', 'expired', 'cancelled', 'pending'] &&
            request.resource.data.vehicle.keys().hasAll(['registrationNumber', 'make', 'model', 'year', 'engineNumber', 'chassisNumber', 'value', 'usage']) &&
            request.resource.data.premium.keys().hasAll(['amount', 'currency', 'paymentStatus', 'paymentMethod']) &&
            request.resource.data.agent_id == request.auth.uid;
    }
    
    function isValidCustomerData() {
        return request.resource.data.keys().hasAll(['nrcPassport', 'firstName', 'lastName', 'email', 'phone', 'address', 'dateOfBirth', 'gender', 'occupation', 'createdBy', 'agent_id']) &&
            request.resource.data.gender in ['male', 'female', 'other'] &&
            request.resource.data.address.keys().hasAll(['street', 'city', 'province', 'postalCode']) &&
            request.resource.data.agent_id == request.auth.uid;
    }
    
    function isValidClaimData() {
        return request.resource.data.keys().hasAll(['policyId', 'customerId', 'incidentDate', 'description', 'location', 'damageType', 'amount', 'createdBy', 'agent_id']) &&
            request.resource.data.damageType in ['Vehicle', 'Property', 'Personal'] &&
            request.resource.data.location.keys().hasAll(['latitude', 'longitude', 'address']) &&
            request.resource.data.agent_id == request.auth.uid;
    }

    function isValidUserData() {
        return request.resource.data.keys().hasAll(['email', 'role']) &&
            request.resource.data.role in ['admin', 'agent', 'customer'];
    }

    function isValidUserUpdateData() {
        return request.resource.data.keys().hasAny(['firstName', 'lastName', 'phone', 'role', 'department', 'employeeId', 'insuranceCompany', 'bio', 'address', 'profileCompleted']) &&
            (!('role' in request.resource.data) || request.resource.data.role in ['admin', 'agent', 'customer']);
    }

    // Users collection - only admins can manage users
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        isValidUserData();
      allow update: if isOwner(userId) || isAdmin() &&
        isValidUserUpdateData();
      allow delete: if isAdmin();
    }

    // Customers collection - user-specific access
    match /customers/{customerId} {
      allow read: if isDataOwner(resource.data.createdBy) || isAdmin();
      allow create: if isAuthenticated() && 
        isValidCustomerData() &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isDataOwner(resource.data.createdBy) || isAdmin();
      allow delete: if isDataOwner(resource.data.createdBy) || isAdmin();
      // Allow aggregation queries for authenticated users
      allow list: if isAuthenticated();
    }

    // Policies collection - user-specific access
    match /policies/{policyId} {
      allow read: if isDataOwner(resource.data.createdBy) || isAdmin();
      allow create: if isAuthenticated() && 
        isValidPolicyData() &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isDataOwner(resource.data.createdBy) || isAdmin();
      allow delete: if isDataOwner(resource.data.createdBy) || isAdmin();
      // Allow aggregation queries for authenticated users
      allow list: if isAuthenticated();
    }

    // Claims collection - user-specific access
    match /claims/{claimId} {
      allow read: if isDataOwner(resource.data.createdBy) || isAdmin();
      allow create: if isAuthenticated() && 
        isValidClaimData() &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isDataOwner(resource.data.createdBy) || isAdmin();
      allow delete: if isDataOwner(resource.data.createdBy) || isAdmin();
      // Allow aggregation queries for authenticated users
      allow list: if isAuthenticated();
    }

    // Documents collection - user-specific access
    match /documents/{documentId} {
      allow read: if isDataOwner(resource.data.uploadedBy) || isAdmin();
      allow create: if isAuthenticated() && 
        request.resource.data.uploadedBy == request.auth.uid;
      allow update: if isDataOwner(resource.data.uploadedBy) || isAdmin();
      allow delete: if isDataOwner(resource.data.uploadedBy) || isAdmin();
      // Allow aggregation queries for authenticated users
      allow list: if isAuthenticated();
    }

    // Logs collection - read-only for admins
    match /logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Logs are system-generated only
    }
  }
}
