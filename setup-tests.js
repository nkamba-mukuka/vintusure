#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const logWithTimestamp = (message) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
};

const checkFileExists = (filePath) => {
  return fs.existsSync(filePath);
};

const createEnvFile = () => {
  const envContent = `# VintuSure Test Configuration
# Update these values with your actual Firebase configuration

FIREBASE_PROJECT_ID=vintusure
GOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json

# Optional: Firebase config overrides
# FIREBASE_API_KEY=your-api-key
# FIREBASE_AUTH_DOMAIN=your-project.firebaseapp.com
# FIREBASE_STORAGE_BUCKET=your-project.appspot.com
# FIREBASE_MESSAGING_SENDER_ID=your-sender-id
# FIREBASE_APP_ID=your-app-id
`;

  if (!checkFileExists('.env')) {
    fs.writeFileSync('.env', envContent);
    logWithTimestamp('‚úÖ Created .env file with template configuration');
    logWithTimestamp('‚ö†Ô∏è  Please update .env with your actual Firebase configuration');
  } else {
    logWithTimestamp('‚ÑπÔ∏è  .env file already exists');
  }
};

const updateFirebaseConfig = () => {
  const testFile = 'test-indexing-rag-system.js';
  
  if (!checkFileExists(testFile)) {
    logWithTimestamp('‚ùå test-indexing-rag-system.js not found');
    return false;
  }

  let content = fs.readFileSync(testFile, 'utf8');
  
  // Check if config is still placeholder
  if (content.includes('BXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')) {
    logWithTimestamp('‚ö†Ô∏è  Firebase configuration needs to be updated');
    logWithTimestamp('üìù Please update the firebaseConfig object in test-indexing-rag-system.js');
    logWithTimestamp('üîó Get your config from: https://console.firebase.google.com/project/_/settings/general/');
    return false;
  } else {
    logWithTimestamp('‚úÖ Firebase configuration appears to be set');
    return true;
  }
};

const installDependencies = () => {
  logWithTimestamp('üì¶ Checking dependencies...');
  
  if (!checkFileExists('package.json')) {
    logWithTimestamp('üìã Creating package.json...');
    const packageJson = fs.readFileSync('test-package.json', 'utf8');
    fs.writeFileSync('package.json', packageJson);
  }
  
  logWithTimestamp('üì¶ Installing dependencies...');
  logWithTimestamp('üí° Run: npm install');
};

const showNextSteps = () => {
  console.log(`
üéâ Setup Complete! Next Steps:

1. üìù Update Firebase Configuration:
   - Edit test-indexing-rag-system.js and update firebaseConfig
   - Or create .env file with your Firebase settings

2. üì¶ Install Dependencies:
   npm install

3. üß™ Run Tests:
   # Complete test suite
   npm test
   
   # Individual tests
   npm run test:customer
   npm run test:claims
   npm run test:policies
   npm run test:documents
   npm run test:rag
   
   # Using test runner
   node run-tests.js --help

4. üìä Check Results:
   - Monitor console output for test results
   - Check Firebase Console for function logs
   - Verify Vector Search indexes are active

üìö For more information, see TEST_README.md
`);
};

const main = () => {
  logWithTimestamp('üöÄ VintuSure Test Setup');
  
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    VintuSure Test Setup                     ‚ïë
‚ïë                                                              ‚ïë
‚ïë  This script will help you set up the indexing and RAG     ‚ïë
‚ïë  test suite for the VintuSure insurance system.            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

  // Check required files
  logWithTimestamp('üìã Checking required files...');
  
  const requiredFiles = [
    'test-indexing-rag-system.js',
    'run-tests.js',
    'test-package.json',
    'TEST_README.md'
  ];
  
  let allFilesExist = true;
  requiredFiles.forEach(file => {
    if (checkFileExists(file)) {
      logWithTimestamp(`‚úÖ ${file} found`);
    } else {
      logWithTimestamp(`‚ùå ${file} missing`);
      allFilesExist = false;
    }
  });
  
  if (!allFilesExist) {
    logWithTimestamp('‚ùå Some required files are missing. Please ensure all test files are present.');
    return;
  }
  
  // Create .env file
  createEnvFile();
  
  // Check Firebase config
  updateFirebaseConfig();
  
  // Install dependencies
  installDependencies();
  
  // Show next steps
  showNextSteps();
  
  logWithTimestamp('‚úÖ Setup completed successfully!');
};

// Run setup
if (require.main === module) {
  main();
}

module.exports = { main };
